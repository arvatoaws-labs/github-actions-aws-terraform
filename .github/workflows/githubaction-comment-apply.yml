name: 'TerraformApply'

on:
  issue_comment:
    types: [created]
  workflow_call:
    inputs:
      region:
        required: true
        type: string
      roleArn:
        required: true
        type: string
      s3bucketName:
        required: true
        type: string
      github_event_number:
        required: true
        type: string
      github_event_issue_comments_url:
        required: true
        type: string
      github_event_repository_url:
        required: true
        type: string
      stack:
        required: false
        type: string
        default: "."

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      stack_changed: ${{ steps.filter.outputs.stack_changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Important to fetch all history for branches

      - name: Check for changes in the stack based on input
        id: filter
        run: |
          STACK_DIR=${{ inputs.stack }}
          echo "Checking for changes in the $STACK_DIR directory..."
          
          PR_NUMBER=$(echo ${{ github.event.issue.pull_request.url }} | grep -o '[^/]*$')
          
          HEAD_SHA=$(gh pr view $PR_NUMBER --json headRefOid -q .headRefOid)
          BASE_BRANCH=$(gh pr view $PR_NUMBER --json baseRefName -q .baseRefName)
          
          # Ensure correct repo syntax for GH API call
          REPO="${{ github.repository }}"
          BASE_SHA=$(gh api repos/$REPO/commits/$BASE_BRANCH --jq '.sha')
          
          echo "Base branch latest commit SHA: $BASE_SHA, PR head commit SHA: $HEAD_SHA"
          
          if git diff --name-only $BASE_SHA $HEAD_SHA | grep -q "^${STACK_DIR}/"; then
            echo "Changes detected in the $STACK_DIR directory."
            echo "stack_changed=true" >> $GITHUB_OUTPUT
          else
            echo "No changes detected in the $STACK_DIR directory."
            echo "stack_changed=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash

  terraform:
    needs: check-changes
    if: needs.check-changes.outputs.stack_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      actions: read
      id-token: write
      contents: write
      pull-requests: write

    steps:
    # Assume the role in AWS to roll out the changes
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.region }}
        role-to-assume: ${{ inputs.roleArn }}
        role-session-name: GitHubTerraformDeployment

    # Get the github token with access to the relevant repositories from the app
    - name: Generate token
      id: generate-token
      uses: tibdex/github-app-token@v2
      with:
        app_id: ${{ secrets.TERRAFORM_GITHUB_ACTION_APP_ID }}
        private_key: ${{ secrets.TERRAFORM_GITHUB_ACTION_PRIVATE_KEY }}

    # Configure github access
    - uses: de-vri-es/setup-git-credentials@v2
      with:
        credentials: https://oauth:${{ steps.generate-token.outputs.token }}@github.com/

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: refs/pull/${{ inputs.github_event_number }}/merge

    - name: Download Lambda ZIPs
      uses: actions/download-artifact@v3
      with:
        name: lambda-zips
        path: .

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: latest

    # Initialize Terraform
    - name: Terraform Init
      run: |
        cd ${{ inputs.stack }}
        terraform init -upgrade

    # Download the plan from S3
    - name: Download Plan from S3
      run: |
        cd ${{ inputs.stack }}
        aws s3 cp s3://${{ inputs.s3bucketName }}/plans/${{ github.repository }}/${{ inputs.stack }}/${{ inputs.github_event_number }}/tfplan ./tfplan

    # Apply the Terraform plan
    - name: Terraform Apply
      id: apply
      run: |
        cd ${{ inputs.stack }}
        terraform apply -input=false -no-color tfplan

    # Post a comment with the apply outputs and add the 'applied' label
    - name: Post Apply to GitHub PR
      if: steps.apply.outcome == 'success'
      env:
        URL: ${{ inputs.github_event_issue_comments_url }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        cd ${{ inputs.stack }}
        (printf "**Terraform Apply ${{ inputs.stack }} environment**\n\n\`\`\`" && echo -n '${{ steps.apply.outputs.stdout }}' && printf "\`\`\`\n\n") > comment.txt
        jq -R -s '.' < comment.txt > comment2.txt
        truncate -s -1 comment2.txt
        (echo -n '{ "body": ' && cat comment2.txt && echo -n ' }') > comment3.txt
        curl \
          -X POST \
          $URL \
          -H "Content-Type: application/json" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d @comment3.txt
        curl \
          -X POST \
          https://api.github.com/repos/${{ github.repository }}/issues/${{ inputs.github_event_number }}/labels \
          -H "Content-Type: application/json" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d '["applied"]'

    # Cleanup lambda.zip files
    - name: Cleanup lambda.zip Files
      run: |
        find . -type f -name 'lambda.zip' -delete
