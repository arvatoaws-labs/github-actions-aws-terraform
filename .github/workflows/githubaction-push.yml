name: 'TerraformPush'

on:
  pull_request:
  workflow_call:
    inputs:
      region:
        required: true
        type: string
      roleArn:
        required: true
        type: string
      s3bucketName:
        required: true
        type: string
      github_event_issue_url:
        required: true
        type: string
      github_event_pr_number:
        required: true
        type: string
      github_event_pr_comments_url:
        required: true
        type: string
      github_event_pr_labels:
        required: true
        type: string
      github_event_repository_url:
        required: true
        type: string
      terraform_version:
        required: true
        type: string

jobs:
  terraform:
    name: 'Pull Request Updated'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    defaults:
      run:
        shell: bash
    steps:
    # Assume the role in AWS to roll out the changes
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.region }}
        role-to-assume: ${{ inputs.roleArn }}
    # remove the plan from S3
    - name: Delete Plan from S3
      if: ${{ contains(${{ inputs.github_event_pr_labels }}.*.name, 'planned')}}
      run: |
        aws s3 rm s3://${{ inputs.s3bucketName }}/plans/tfplan

    # Post a comment with the plan outputs
    - name: Post Comment to GitHub PR
      if: ${{ contains(${{ inputs.github_event_pr_labels }}.*.name, 'planned')}}
      env:
        COMMENT: ${{ inputs.github_event_pr_comments_url }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        curl \
          -X POST \
          $COMMENT \
          -H "Content-Type: application/json" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          --data '{ "body": "New code was pushed to the pull request, removed plan." }'
        curl \
          -X DELETE \
          ${{ inputs.github_event_repository_url }}/issues/${{ inputs.github_event_pr_number }}/labels/planned \
          -H "Content-Type: application/json" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}"
    # Get the github token with access to the relevant repositories from the app
    - name: Generate token
      id: generate-token
      uses: tibdex/github-app-token@v1
      with:
        app_id: ${{ secrets.TERRAFORM_GITHUB_ACTION_APP_ID }}
        private_key: ${{ secrets.TERRAFORM_GITHUB_ACTION_PRIVATE_KEY }}
    # Configure github access
    - uses: de-vri-es/setup-git-credentials@v2
      with:
        credentials: https://oauth:${{ steps.generate-token.outputs.token }}@github.com/
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.terraform_version }}
    # Initialize Terraform for
    - name: Terraform Init
      run: terraform init -upgrade
    # Check that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check -diff -recursive
    # Generate plan
    - name: Terraform Plan
      id: plan
      continue-on-error: true
      run: |
        terraform plan -input=false -no-color -out=tfplan && terraform show -no-color tfplan | sed 's/\x27/ /g' | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt
    # Upload the plan to S3
    - name: Upload Plan to S3
      run: |
        aws s3 cp ./tfplan s3://${{ inputs.s3bucketName }}/plans/
    # CONCLUDE
    # Post a comment with the plan outputs and add the 'planned' label
    - name: Post Plan to GitHub PR
      env:
        COMMENT: ${{ inputs.github_event_pr_comments_url }}
        LABEL: ${{ inputs.github_event_issue_url }}/issues/${{ inputs.github_event_pr_number }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        (printf "Plan\n\n\`\`\`diff" && sed '/^::/d' plan.txt && printf "\`\`\`") > comment.txt
        jq -R -s '.' < comment.txt > comment2.txt
        truncate -s -1 comment2.txt
        (echo -n '{ "body": ' && cat comment2.txt && echo -n ' }') > comment3.txt
        curl \
          -X POST \
          $COMMENT \
          -H "Content-Type: application/json" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d @comment3.txt
        curl \
          -X POST \
          $LABEL/labels \
          -H "Content-Type: application/json" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d '["planned"]'