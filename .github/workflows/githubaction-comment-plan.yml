name: 'TerraformPlan'

on:
  issue_comment:
    types: [created]
  workflow_call:
    inputs:
      region:
        required: true
        type: string
      terraform_version:
        required: true
        type: string
      roleArn:
        required: true
        type: string
      s3bucketName:
        required: true
        type: string
      github_event_number:
        required: true
        type: string
      github_event_issue_url:
        required: true
        type: string
      github_event_issue_comments_url:
        required: true
        type: string


jobs:
  terraform:
    name: 'Plan Terraform'
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.job.outputs.job_id }}
    permissions:
      actions: read
      id-token: write
      contents: read
      pull-requests: write
    defaults:
      run:
        shell: bash

    steps:
    # Expose and capture the job ID of the current job
    - uses: ReeganExE/github-action-job-id@v1.0
    - name: Job ID output
      id: job
      run: |
        echo ${GH_JOB_0_ID}
        echo "job_id=$GH_JOB_0_ID" >> $GITHUB_OUTPUT

    # Assume the role in AWS to roll out the changes
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.region }}
        role-to-assume: ${{ inputs.roleArn }}
        role-session-name: GitHubTerraformDeployment

    # Get the github token with access to the relevant repositories from the app
    - name: Generate token
      id: generate-token
      uses: tibdex/github-app-token@v2
      with:
        app_id: ${{ secrets.TERRAFORM_GITHUB_ACTION_APP_ID }}
        private_key: ${{ secrets.TERRAFORM_GITHUB_ACTION_PRIVATE_KEY }}

    # Configure github access
    - uses: de-vri-es/setup-git-credentials@v2
      with:
        credentials: https://oauth:${{ steps.generate-token.outputs.token }}@github.com/

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: refs/pull/${{ inputs.github_event_number }}/merge

    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.terraform_version }}

    # Initialize Terraform
    - name: Terraform Init
      run: terraform init -upgrade

    # Check that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check -diff -recursive

    # Generate terraform plan
    - name: Terraform Plan
      id: tfplan
      continue-on-error: true
      run: |
        # Bash script to build terraform plan command dynamically
        COMMAND="terraform plan -input=false -no-color -out=tfplan"
        SECRETS_JSON='${{ toJson(secrets) }}'
        SECRETS=$(echo "$SECRETS_JSON" | jq -r 'keys[]')
        # Loop over each secret in the GitHub Actions environment
        for key in $SECRETS; do
          value=$(echo "$SECRETS_JSON" | jq -r ".[\"$key\"]")
          # Check if the secret name has the prefix "TF_VAR_"
          if [[ $key == TF_VAR_* ]]; then
            # Add the secret as an input variable to the terraform command
            COMMAND="$COMMAND -var '${key#TF_VAR_}=$value'"
          fi
        done
        # Execute the dynamically generated terraform command
        eval $COMMAND && terraform show -no-color tfplan | sed 's/\x27/ /g' | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt

    # Upload the plan to S3
    - name: Upload Plan to S3
      run: |
        aws s3 cp ./tfplan s3://${{ inputs.s3bucketName }}/plans/

    # CONCLUDE
    # Post a comment with the plan outputs and add the 'planned' label
    - name: Post Plan to GitHub PR
      env:
        COMMENT: ${{ inputs.github_event_issue_comments_url }}
        LABEL: ${{ inputs.github_event_issue_url }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        (printf "Mode1 Plan\n\n\`\`\`diff" && sed '/^::/d' plan.txt) > comment.txt
        jq -R -s '.' < comment.txt > comment2.txt
        truncate -s -1 comment2.txt
        (echo -n '{ "body": ' && cat comment2.txt && echo -n ' }') > comment3.txt
        curl \
          -X POST \
          $COMMENT \
          -H "Content-Type: application/json" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d @comment3.txt
        curl \
          -X POST \
          $LABEL/labels \
          -H "Content-Type: application/json" \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -d '["planned"]'

  logging:
    name: 'Save logs'
    needs: terraform
    runs-on: ubuntu-latest
    if: always() # This job will always run
    permissions:
      actions: read
      id-token: write
      contents: read
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Assume the role in AWS to upload the logs
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.region }}
        role-to-assume: ${{ inputs.roleArn }}

    # Save previous job logs and upload to s3
    - name: Retrieve log file and upload to s3
      run: |
        TIMESTAMP=$(date +'%Y-%m-%d-%H:%M:%S')
        LOG_FILENAME="TerraformPlan_${{ inputs.github_event_number }}_PR_$TIMESTAMP.txt"
        # Get log file
        gh api repos/{owner}/{repo}/actions/jobs/${{ needs.terraform.outputs.output1 }}/logs > $LOG_FILENAME
        # Upload it to s3
        aws s3 cp $LOG_FILENAME s3://${{ inputs.s3bucketName }}/logs/Plan/
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}