name: 'TerraformPlanScheduled'

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      region:
        required: true
        type: string
      roleArn:
        required: true
        type: string
      terraform_version:
        required: true
        type: string

jobs:
  terraform:
    name: 'Plan Terraform'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    defaults:
      run:
        shell: bash

    steps:
    # Assume the role in AWS to roll out the changes
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-region: ${{ inputs.region }}
        role-to-assume: ${{ inputs.roleArn }}
    # Get the github token with access to the relevant repositories from the app
    - name: Generate token
      id: generate-token
      uses: tibdex/github-app-token@v2
      with:
        app_id: ${{ secrets.TERRAFORM_GITHUB_ACTION_APP_ID }}
        private_key: ${{ secrets.TERRAFORM_GITHUB_ACTION_PRIVATE_KEY }}
    # Configure github access
    - uses: de-vri-es/setup-git-credentials@v2
      with:
        credentials: https://oauth:${{ steps.generate-token.outputs.token }}@github.com/
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    # Install the latest version of Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ inputs.terraform_version }}
    # Initialize Terraform
    - name: Terraform Init
      run: terraform init -upgrade
    # Generate plan
    - name: Terraform Plan Landingzone
      id: tfplan
      continue-on-error: true
      run: |
        # Bash script to build terraform plan command dynamically
        COMMAND="terraform plan -input=false -no-color -out=tfplanlz --detailed-exitcode"
        SECRETS_JSON='${{ toJson(secrets) }}'
        SECRETS=$(echo "$SECRETS_JSON" | jq -r 'keys[]')
        # Loop over each secret in the GitHub Actions environment
        for key in $SECRETS; do
          value=$(echo "$SECRETS_JSON" | jq -r ".[\"$key\"]")
          # Check if the secret name has the prefix "TF_VAR_"
          if [[ $key == TF_VAR_* ]]; then
            # Add the secret as an input variable to the terraform command
            COMMAND="$COMMAND -var '${key#TF_VAR_}=$value'"
          fi
        done
        # Execute the dynamically generated terraform command
        eval $COMMAND

    # CONCLUDE
    # Check if plan generated differences or failed
    - name: Check TF Plan outcome
      if: steps.tfplan.outputs.exitcode !=0
      run: exit 1
